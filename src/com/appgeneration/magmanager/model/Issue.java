package com.appgeneration.magmanager.model;

import java.util.Locale;

import com.appgeneration.magmanager.ui.activities.StoreActivity;
import com.appgeneration.magmanager.util.StringUtils;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT. Enable "keep" sections if you want to edit. 
/**
 * Entity mapped to table ISSUE.
 */
public class Issue {

	private long id;
	private String name;
	private String title;
	private String cover;
	private String document;
	/** Not-null value. */
	private java.util.Date publicationDate;
	private String itemSKU;
	private String previewText;
	private String previewCover;
	private String fileType;

	// item and document status
	private ItemStatus itemStatus = ItemStatus.LOADING;
	private DocumentStatus documentStatus = DocumentStatus.UNAVAILABLE;

	// item-related properties
	private String priceString = null; // issue's price, null if free

	// progress if being downloaded
	private int downloadProgress = -1;

	public Issue() {
	}

	public Issue(long id) {
		this.id = id;
	}

	public Issue(long id, String name, String title, String cover,
			String document, java.util.Date publicationDate, String sku,
			String previewText, String previewCover) {
		this.id = id;
		this.name = name;
		this.title = title;
		this.cover = cover;
		this.document = document;
		this.publicationDate = publicationDate;
		if( StoreActivity.turnOffPrice) // nhi add to turn off price
			this.itemSKU = null;
		else
			this.itemSKU = sku.equals("null") ? null : sku.toLowerCase(Locale.US); // google
																				// in-apps
																				// can
																				// only
																				// be
																				// lowercase																		
		this.previewText = previewText;
		this.previewCover = previewCover;
		this.fileType = StringUtils
				.getFileTypeFromFileURIAsString(this.document);
	}

	public Long getId() {
		return id;
	}

	public void setId(Long id) {
		this.id = id;
	}

	public String getName() {
		return name;
	}

	public void setName(String name) {
		this.name = name;
	}

	public String getTitle() {
		return title;
	}

	public void setTitle(String title) {
		this.title = title;
	}

	public String getCover() {
		return cover;
	}

	public void setCover(String cover) {
		this.cover = cover;
	}

	public String getDocument() {
		return document;
	}

	public void setDocument(String document) {
		this.document = document;
	}

	/** Not-null value. */
	public java.util.Date getPublicationDate() {
		return publicationDate;
	}

	/**
	 * Not-null value; ensure this value is available before it is saved to the
	 * database.
	 */
	public void setPublicationDate(java.util.Date publicationDate) {
		this.publicationDate = publicationDate;
	}

	public String getSKU() {
		return itemSKU;
	}

	public String getPrice() {
		return priceString;
	}

	public void setPrice(String price) {
		this.priceString = price;
	}

	public String getPreviewText() {
		return previewText;
	}

	public void setPreviewText(String previewText) {
		this.previewText = previewText;
	}

	public String getPreviewCover() {
		return previewCover;
	}

	public void setPreviewCover(String previewCover) {
		this.previewCover = previewCover;
	}

	/**
	 * @return the itemStatus
	 */
	public ItemStatus getItemStatus() {
		return itemStatus;
	}

	/**
	 * @return the documentStatus
	 */
	public DocumentStatus getDocumentStatus() {
		return documentStatus;
	}

	/**
	 * @param itemStatus
	 *            the itemStatus to set
	 */
	public void setItemStatus(ItemStatus itemStatus) {
		this.itemStatus = itemStatus;
	}

	/**
	 * @param documentStatus
	 *            the documentStatus to set
	 */
	public void setDocumentStatus(DocumentStatus documentStatus) {
		this.documentStatus = documentStatus;
	}

	/**
	 * @return the downloadProgress
	 */
	public int getDownloadProgress() {
		return downloadProgress;
	}

	/**
	 * @param downloadProgress
	 *            the downloadProgress to set
	 */
	public void setDownloadProgress(int downloadProgress) {
		this.downloadProgress = downloadProgress;
	}

	/**
	 * @return the fileType
	 */
	public String getFileType() {
		return fileType;
	}

	/**
	 * @return the price
	 */
	public String getIssuePriceString() {
		return priceString;
	}

	/**
	 * Checks if the issue is paid, by comparing its sku
	 * 
	 * @return A boolean indicating whether or not it is paid
	 */
	public boolean isPaid() {

		return itemSKU != null && itemSKU.compareTo("") != 0;
	}

	/**
	 * Just a little helper
	 * 
	 * @return A boolean indicating whether or not it is free
	 */
	public boolean isFree() {
		return !isPaid();
	}

	/**
	 * Checks if a issue is available to be consumed (read) An issue is
	 * considered to be available to consume if it was already bought or the
	 * price is loading but the document itself exists
	 * 
	 * @return
	 */
	public boolean isAvailableToConsume() {

		return itemStatus == ItemStatus.BOUGHT
				|| (itemStatus == ItemStatus.LOADING && (documentStatus == DocumentStatus.READY
						|| documentStatus == DocumentStatus.DOWNLOADING
						|| documentStatus == DocumentStatus.PAUSED || documentStatus == DocumentStatus.QUEUED));
	}

	public boolean isReadyToBeRead() {

		return documentStatus == DocumentStatus.READY;
	}

	public boolean isPriceReady() {

		return itemStatus != ItemStatus.LOADING;
	}

	public boolean isPriceAvaible() {

		return itemStatus == ItemStatus.AVAILABLE_TO_BUY;
	}

	public boolean canBeDeleted() {

		return documentStatus == DocumentStatus.READY
				|| documentStatus == DocumentStatus.PAUSED
						|| documentStatus == DocumentStatus.COMPRESSED;
	}

	public boolean isAvailableToDownloadActions() {
		return (documentStatus == DocumentStatus.AVAILABLE && (isFree() || itemStatus == ItemStatus.BOUGHT))
				|| documentStatus == DocumentStatus.DOWNLOADING
				|| documentStatus == DocumentStatus.PAUSED;
	}

	public boolean isCurrentlyBeingDownloadedExtractedOrExists() {
		return documentStatus == DocumentStatus.READY
				|| documentStatus == DocumentStatus.DOWNLOADING
				|| documentStatus == DocumentStatus.PAUSED
				|| documentStatus == DocumentStatus.QUEUED
				|| documentStatus == DocumentStatus.UNCOMPRESSING;
	}
}
